{
  "compilerOptions": {
    "outDir": "./dist/", // не очень нужна т.к. собираем с помощью верпака
    // Подсвечивает все места где не указан тип
    // Однако это не означает, что теперь вовсе нельзя использовать any.
    // Это означает лишь, что в подобных ситуация разработчик должен явно писать any,
    "noImplicitAny": true,
    "module": "es6",
    // В какую спецификацию компилируем: для поддержки большинства браузеров
    "target": "es5",
    "jsx": "react-jsx",    // Компилятор будет обрабатывать не только TS файлы, но и JS файлы, -jsx lj,fdkty xnj,s TS не ругался на отсутсвие импорта реакта в файлах
    "allowJs": true,
    // для абсолютного импорта
    // "baseUrl": ".",
    "moduleResolution": "node",
    // esModuleInterop позволяет работать с пакетами, которые используют
    // common js как с обычными пакета с помощью import (require() module.export) = common js
    // import Moment from 'moment' без флага esModuleInterop результат undefined
    // console.log(Moment), c флагом результат [object Object]
    "esModuleInterop": true,
    // Если какая-либо библиотека не имеет default import,
    // лоадеры вроде ts-loader или babel-loader автоматически создают их
    // вместо такого импорта
    // import * as React from 'react';
    // можно писать такой
    // import React from 'react';
  },
  // убрать ошибку import * as path from 'path'; ^^^^^^ SyntaxError: Cannot use import statement outside a module
  // https://webpack.js.org/configuration/configuration-languages/#:~:text=%22ts%2Dnode%22%3A%20%7B%0A%20%20%20%20%22compilerOptions%22%3A%20%7B%0A%20%20%20%20%20%20%22module%22%3A%20%22CommonJS%22%0A%20%20%20%20%7D%0A%20%20%7D
  "ts-node": {
    "compilerOptions": {
      "module": "CommonJS",
    }
  }
}